<Project DefaultTargets="Execute">
  <Import Project="Imports.props"/>

  <PropertyGroup>
    <_RepoRootOriginal>$(RepoRoot)</_RepoRootOriginal>
    <RepoRoot>$([System.IO.Path]::GetFullPath('$(RepoRoot)\'))</RepoRoot>

    <_OriginalProjectsValue>$(Projects)</_OriginalProjectsValue>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <ProjectToBuild>
      <RestoreInParallel>true</RestoreInParallel>
    </ProjectToBuild>
  </ItemDefinitionGroup>

  <!-- Allow for repo specific Build properties such as the list of Projects to build -->
  <Import Project="$(RepositoryEngineeringDir)Build.props" Condition="Exists('$(RepositoryEngineeringDir)Build.props')" />

  <ItemGroup Condition="'$(Projects)' != ''">
    <!-- Copy the original list so we can log diagnostics later. -->
    <_OriginalProjectToBuild Include="@(ProjectToBuild)" />
    <!-- Setting 'Projects' overrides the ProjectToBuild list. -->
    <ProjectToBuild Remove="@(ProjectToBuild)" />
    <ProjectToBuild Include="$(Projects)" />
  </ItemGroup>

  <!--
    Default values.
  -->
  <!-- If Projects is unspecified and ProjectToBuild was not set via Build.props, fallback to building .sln files in the repo root. -->
  <ItemGroup Condition="'@(ProjectToBuild)' == ''">
    <ProjectToBuild Include="$(RepoRoot)\*.sln" />
  </ItemGroup>

  <Target Name="Execute">
    <Error Text="No projects were found to build. Either the 'Projects' property or 'ProjectToBuild' item group must be specified." Condition="'@(ProjectToBuild)' == ''"/>
    <Error Text="Property 'RepoRoot' must be specified" Condition="'$(_RepoRootOriginal)' == ''"/>
    <Error Text="File 'global.json' must exist in directory specified by RepoRoot: '$(_RepoRootOriginal)'" Condition="'$(_RepoRootOriginal)' != '' and !Exists('$(RepoRoot)\global.json')"/>

    <ItemGroup>
      <_SolutionBuildTargets Include="Rebuild" Condition="'$(Rebuild)' == 'true'" />
      <_SolutionBuildTargets Include="Build" Condition="'$(Build)' == 'true' and '$(Rebuild)' != 'true'" />
      <!-- Extensibility point to run addition build targets after build. -->
      <_SolutionBuildTargets Include="@(SolutionBuildTargets)" />
      <!-- Deploy target is set up to chain after Build so that F5 in VS works. -->
      <_SolutionBuildTargets Include="Test" Condition="'$(Test)' == 'true'" />
      <!-- Pack before running integration and performance tests so that these tests can test packages produced by the repo. -->
      <_SolutionBuildTargets Include="Pack" Condition="'$(Pack)' == 'true'" />
      <_SolutionBuildTargets Include="IntegrationTest" Condition="'$(IntegrationTest)' == 'true'" />
      <_SolutionBuildTargets Include="PerformanceTest" Condition="'$(PerformanceTest)' == 'true'" />
    </ItemGroup>

    <PropertyGroup>
      <_RemoveProps>Projects;Restore;Deploy;Sign;Publish;NETCORE_ENGINEERING_TELEMETRY;@(_SolutionBuildTargets)</_RemoveProps>
    </PropertyGroup>

    <ItemGroup>
      <_CommonProps Include="Configuration=$(Configuration)"/>
      <_CommonProps Include="ContinuousIntegrationBuild=$(ContinuousIntegrationBuild)"/>
      <_CommonProps Include="RepoRoot=$(RepoRoot)"/>
      <_CommonProps Include="VersionsPropsPath=$(VersionsPropsPath)"/>

      <!--
        When building from source we suppress restore for projects that set ExcludeFromSourceBuild=true.
        NuGet Restore task reports a warning for such projects, which we suppress here.
      -->
      <_CommonProps Include="DisableWarnForInvalidRestoreProjects=true" Condition="'$(DotNetBuildFromSource)' == 'true'"/>
    </ItemGroup>

    <ItemGroup Condition="'$(Restore)' == 'true'">
      <_RestoreToolsProps Include="@(_CommonProps)"/>
      <_RestoreToolsProps Include="BaseIntermediateOutputPath=$(ArtifactsToolsetDir)Common"/>
      <_RestoreToolsProps Include="ExcludeRestorePackageImports=true"/>
      <_RestoreToolsProps Include="PublishingToBlobStorage=$(DotNetPublishToBlobFeed)"/>
    </ItemGroup>

    <ItemGroup>
      <_PublishProps Include="@(_CommonProps)"/>
      <_PublishProps Include="PublishToAzureDevOpsArtifacts=$(DotNetPublishUsingPipelines)" />
      <_PublishProps Include="ArtifactsCategory=$(DotNetArtifactsCategory)" />
      <_PublishProps Include="AzureFeedUrl=$(DotNetPublishBlobFeedUrl)" Condition="'$(DotNetPublishToBlobFeed)' == 'true'" />
      <_PublishProps Include="AzureAccountKey=$(DotNetPublishBlobFeedKey)" Condition="'$(DotNetPublishToBlobFeed)' == 'true'" />
      <_PublishProps Include="DotNetOutputBlobFeedDir=$(_DotNetOutputBlobFeedDir)" Condition="'$(_DotNetOutputBlobFeedDir)' != ''" />
    </ItemGroup>

    <ItemGroup>
      <_SolutionBuildProps Include="@(_CommonProps)"/>
      <_SolutionBuildProps Include="__DeployProjectOutput=$(Deploy)" Condition="'$(Deploy)' != ''"/>
    </ItemGroup>

    <!--
      Restore solutions and projects.

      Run solution restore separately from the other targets, in a different build phase.
      Since restore brings in new .props and .targets files we need to rerun evaluation.

      Workarounds:
      - Invoke restore using NuGet.targets directly (see https://github.com/NuGet/Home/issues/7648).
        This avoids duplicate calls to RestoreTask and race conditions on writing restore results to disk.

      - msbuild caches the metaproject for the solution (see https://github.com/Microsoft/msbuild/issues/1695)
        We invalidate the cache by changing the value of __BuildPhase property.
    -->

    <PropertyGroup>
      <!-- This can be set to false as an optimization for repos that don't use NuGet. -->
      <RestoreUsingNuGetTargets Condition="'$(RestoreUsingNuGetTargets)' == ''">true</RestoreUsingNuGetTargets>

      <!-- IsRunningFromVisualStudio may be true even when running msbuild.exe from command line. This generally means that MSBUild is Visual Studio installation and therefore we need to find NuGet.targets in a different location.  -->
      <_NuGetRestoreTargets>$(MSBuildToolsPath)\NuGet.targets</_NuGetRestoreTargets>
      <_NuGetRestoreTargets Condition="'$([MSBuild]::IsRunningFromVisualStudio())' == 'true'">$(MSBuildToolsPath32)\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets</_NuGetRestoreTargets>
    </PropertyGroup>

    <!--
      Detect which projects support restoring with NuGet targets.
      As a perf optimization, the Properties list here should match exactly with
      the properties passed to the "Restore" target a few lines below.
      This helps MSBuild cache the result of _IsProjectRestoreSupported.
    -->
    <MSBuild Projects="@(ProjectToBuild)"
             Properties="@(_SolutionBuildProps);__BuildPhase=SolutionRestore;_NETCORE_ENGINEERING_TELEMETRY=Restore"
             RemoveProperties="$(_RemoveProps)"
             Targets="_IsProjectRestoreSupported"
             SkipNonexistentTargets="true"
             BuildInParallel="true"
             Condition="'$(RestoreUsingNuGetTargets)' != 'false' and '%(ProjectToBuild.Extension)' != '.sln' and '$(Restore)' == 'true'">

      <Output TaskParameter="TargetOutputs" ItemName="_ProjectToRestoreWithNuGet" />
    </MSBuild>

    <PropertyGroup>
      <!-- Normalize paths to avoid false warnings by NuGet about missing project references. -->
      <_ProjectToRestoreWithNuGetList>@(_ProjectToRestoreWithNuGet->'%(FullPath)')</_ProjectToRestoreWithNuGetList>
    </PropertyGroup>

    <ItemGroup>
      <_ProjectToRestore Include="$(_NuGetRestoreTargets)" Condition="'$(_ProjectToRestoreWithNuGetList)' != '' and '$(RestoreUsingNuGetTargets)' != 'false'">
        <AdditionalProperties>RestoreGraphProjectInput=$(_ProjectToRestoreWithNuGetList)</AdditionalProperties>
        <RestoreInParallel>true</RestoreInParallel>
      </_ProjectToRestore>

      <!-- Invoke the 'Restore' target on solutions and projects which do not support NuGet. -->
      <_ProjectToRestore Include="@(ProjectToBuild)" Exclude="@(_ProjectToRestoreWithNuGet)" />
    </ItemGroup>

    <MSBuild Projects="@(_ProjectToRestore)"
             Properties="@(_SolutionBuildProps);__BuildPhase=SolutionRestore;_NETCORE_ENGINEERING_TELEMETRY=Restore"
             RemoveProperties="$(_RemoveProps)"
             Targets="Restore"
             SkipNonexistentTargets="true"
             BuildInParallel="%(_ProjectToRestore.RestoreInParallel)"
             Condition="'$(Restore)' == 'true'"/>

    <!--
      Build solution.
    -->
    <MSBuild Projects="@(ProjectToBuild)"
             Properties="@(_SolutionBuildProps);__BuildPhase=SolutionBuild;_NETCORE_ENGINEERING_TELEMETRY=Build"
             RemoveProperties="$(_RemoveProps)"
             Targets="@(_SolutionBuildTargets)"
             BuildInParallel="true"
             Condition="'@(_SolutionBuildTargets)' != ''" />

    <MSBuild Projects="AfterSolutionBuild.proj"
             Properties="@(_CommonProps);_NETCORE_ENGINEERING_TELEMETRY=Build"
             Targets="@(_SolutionBuildTargets)"
             SkipNonexistentTargets="true"
             Condition="'@(_SolutionBuildTargets)' != ''" />
  </Target>

  <Import Project="Imports.targets"/>

  <!-- Allow for repo specific Build properties such as the list of Projects to build -->
  <Import Project="$(RepositoryEngineeringDir)Build.targets" Condition="Exists('$(RepositoryEngineeringDir)Build.targets')" />
</Project>
